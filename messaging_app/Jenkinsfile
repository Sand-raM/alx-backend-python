pipeline {
    agent any

    environment {
        GIT_REPO = 'https://github.com/Sand-raM/alx-backend-python.git'
        BRANCH = 'main'  // Ensure this branch exists
        GITHUB_CREDENTIALS = 'github-credentials-id'  // Ensure this is correct
        DOCKER_CREDENTIALS = 'docker-hub-credentials-id' // Docker Hub credentials ID
        DOCKER_IMAGE = 'your-dockerhub-username/messaging-app:latest' // Replace with your Docker Hub username and desired image name
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout code from GitHub using credentials
                git branch: 'main', credentialsId: "${GITHUB_CREDENTIALS}", url: "${GIT_REPO}"
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    // Install dependencies from the requirements.txt file
                    sh 'pip3 install -r messaging_app/requirements.txt'
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    // Run pytest tests
                    sh 'pytest --maxfail=1 --disable-warnings -q'
                }
            }
        }

        stage('Generate Report') {
            steps {
                script {
                    // Generate test report with pytest
                    sh 'pytest --maxfail=1 --disable-warnings --html=report.html'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image
                    sh "docker build -t ${DOCKER_IMAGE} ."
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Login to Docker Hub and push the image
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                        sh "docker push ${DOCKER_IMAGE}"
                    }
                }
            }
        }
    }
}
